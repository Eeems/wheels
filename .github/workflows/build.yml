name: Build Wheels
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
permissions: read-all
jobs:
  standard:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - cffi
          - crcmod
          - nuitka
          - protobuf
          - zstandard
          - pynacl
        python:
          - '3.12'
          - '3.11'
          - '3.10'
        build_on:
          - ubuntu-amd64
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  # pyqt5:
  #   name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       package:
  #         - pyqt5
  #       python:
  #         - '3.12'
  #         - '3.11'
  #       build_on:
  #         - debian-armv7l
  #   steps:
  #     - name: Checkout the Git repository
  #       uses: actions/checkout@v4
  #     - name: Build ${{ matrix.package }}
  #       uses: ./
  #       with:
  #         name: ${{ matrix.package }}
  #         build_on: ${{ matrix.build_on }}
  #         python_version: ${{ matrix.python }}
  #         config_settings: |
  #           { "--confirm-license": "" }
  #         setup: |
  #           SUDO=''
  #           if [ "$EUID" -ne 0 ]; then
  #             SUDO=sudo
  #           fi
  #           export DEBIAN_FRONTEND="noninteractive"
  #           $SUDO apt-get -y update
  #           $SUDO apt-get install -y \
  #             qtbase5-dev \
  #             qt5-qmake
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
  #         path: dist
  #         if-no-files-found: ignore

  standard-3_11-up:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - remarkable-update-image
          - remarkable-update-fuse
        python:
          - '3.12'
          - '3.11'
        build_on:
          - ubuntu-amd64
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  arm-3_11-up:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - evdev
        python:
          - '3.12'
          - '3.11'
        build_on:
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  pillow:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - pillow
        python:
          - '3.11'
        build_on:
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
          setup: |
            SUDO=''
            if [ "$EUID" -ne 0 ]; then
              SUDO=sudo
            fi
            export DEBIAN_FRONTEND="noninteractive"
            $SUDO apt-get -y update
            $SUDO apt-get install -y \
              libtiff5-dev \
              libjpeg62-turbo-dev \
              libopenjp2-7-dev \
              zlib1g-dev \
              libfreetype6-dev \
              liblcms2-dev \
              libwebp-dev \
              tcl8.6-dev \
              tk8.6-dev \
              python3-tk \
              libharfbuzz-dev \
              libfribidi-dev \
              libxcb1-dev
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore
  ninja:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - ninja
        python:
          - '3.12'
          - '3.11'
        build_on:
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
          setup: |
            SUDO=''
            if [ "$EUID" -ne 0 ]; then
              SUDO=sudo
            fi
            export DEBIAN_FRONTEND="noninteractive"
            $SUDO apt-get -y update
            $SUDO apt-get install -y \
              build-essential \
              python3-pip \
              python3-dev \
              cmake
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  numpy:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - numpy
        python:
          - '3.12'
          - '3.11'
        build_on:
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
          setup: |
            SUDO=''
            if [ "$EUID" -ne 0 ]; then
              SUDO=sudo
            fi
            export DEBIAN_FRONTEND="noninteractive"
            $SUDO apt-get -y update
            $SUDO apt-get install -y \
              gcc \
              g++ \
              gfortran \
              libopenblas-dev \
              liblapack-dev \
              pkg-config \
              python3-pip \
              python3-dev \
              cmake
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  wxpython:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - wxpython
        python:
          - '3.12'
          - '3.11'
        build_on:
          - ubuntu-amd64
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
          setup: |
            SUDO=''
            if [ "$EUID" -ne 0 ]; then
              SUDO=sudo
            fi
            export DEBIAN_FRONTEND="noninteractive"
            $SUDO apt-get -y update
            $SUDO apt-get install -y \
              dpkg-dev \
              build-essential \
              python3-dev \
              freeglut3-dev \
              libgl1-mesa-dev \
              libglu1-mesa-dev \
              libgstreamer-plugins-base1.0-dev \
              libgtk-3-dev \
              libjpeg-dev \
              libnotify-dev \
              libpng-dev \
              libsdl2-dev \
              libsm-dev \
              libtiff-dev \
              libwebkit2gtk-4.0-dev \
              libxtst-dev \
              libunwind-dev
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  rust:
    name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - cryptography
          - bcrypt
        python:
          - '3.12'
          - '3.11'
          - '3.10'
        build_on:
          - ubuntu-amd64
          - debian-armv7l
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
          build_on: ${{ matrix.build_on }}
          python_version: ${{ matrix.python }}
          setup: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source ~/.cargo/env
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py${{ matrix.python}}-${{ matrix.build_on }}
          path: dist
          if-no-files-found: ignore

  universal:
    name: ${{ matrix.package }}-py2.py3-none-any
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - exodus-bundler
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Build ${{ matrix.package }}
        uses: ./
        with:
          name: ${{ matrix.package }}
        env:
          UNIVERSAL: 1
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-py2.py3-none-any
          path: dist
          if-no-files-found: ignore

  mirror:
    name: Deploy
    environment: wheels.eeems.codes
    runs-on: self-hosted
    needs:
      - standard
      - standard-3_11-up
      - arm-3_11-up
      # - pyqt5
      - pillow
      - numpy
      - ninja
      - wxpython
      - rust
      - universal
    if: ${{ always() }}
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create directories
        run: |
          python -u create_dirs.py ./artifacts ./dist
      - name: Sync with wheels.eeems.codes
        run: |
          if ! [ -z "$(ls -A ./dist)" ]; then
            touch "$KEY_LOCATION"
            chmod 600 "$KEY_LOCATION"
            echo "$SSH_KEY" > "$KEY_LOCATION"
            rsync \
              -Pcuav \
              -e "ssh -p 22 -oStrictHostKeyChecking=no -i \"$KEY_LOCATION\"" \
              ./dist/* \
              "$SSH_USER@$SSH_HOST:$SSH_DIR/"
            rm "$KEY_LOCATION"
          fi;
        env:
          KEY_LOCATION: ${{ runner.temp }}/server_key
          SSH_HOST: ${{ vars.SSH_SERVER }}
          SSH_KEY: ${{secrets.SSH_KEY}}
          SSH_DIR: ${{ vars.SSH_PATH }}
          SSH_USER: ${{ vars.SSH_USER }}
